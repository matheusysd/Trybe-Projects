{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/NewMovie.js","pages/MovieDetails.js","pages/EditMovie.js","pages/error.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","title","subtitle","storyline","imagePath","id","className","data-testid","alt","src","to","React","Component","Loading","movies","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","MovieList","state","needLoad","then","res","setState","map","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","placeholder","type","value","onChange","event","updateMovie","target","htmlFor","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","defaultProps","NewMovie","redirect","newMovie","movieData","nextId","length","movieAPI","history","push","MovieDetails","match","params","filter","status","EditMovie","shouldRedirect","updatedMovie","Error","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7e99d5a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, imagePath, id } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n        <div className=\"movie-card-body\">\n          <h4 className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Link className=\"link\" to={`movies/${id}`}>\n          VER DETALHES\n        </Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  });\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: '',\n      needLoad: true,\n    };\n  }\n  componentDidMount() {\n    movieAPI.getMovies().then((res) => this.setState({ movies: res, needLoad: false }));\n  }\n  render() {\n    const { movies, needLoad } = this.state;\n    return needLoad ? (\n      <Loading />\n    ) : (\n      <div data-testid=\"movie-list\">\n        {movies.map((movie) => (\n          <MovieCard key={movie.title} movie={movie} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n        <label htmlFor=\"movie_title\">Título</label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n        <label htmlFor=\"movie_subtitle\">Subtítulo</label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n        <label htmlFor=\"movie_image\">Imagem</label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <textarea\n          id=\"movie_storyline\"\n          value={storyline}\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n        <label htmlFor=\"movie_storyline\">Sinopse</label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">Gênero</label>\n        <select\n          id=\"movie_genre\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Dê a avaliação do filme\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n        <label htmlFor=\"movie_rating\">Avaliação</label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button type=\"button\" onClick={this.handleSubmit}>\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MovieForm;\n\nMovieForm.defaultProps = {\n  movie: {\n    title: '',\n    subtitle: '',\n    storyline: '',\n    rating: 0,\n    imagePath: '',\n    bookmarked: false,\n    genre: '',\n  },\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie).then(\n      this.setState({\n        redirect: true,\n      }),\n    );\n  }\n\n  render() {\n    const { redirect } = this.state;\n    const { history } = this.props;\n    if (redirect) history.push('/');\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n\nNewMovie.propTypes = {\n  history: PropTypes.objectOf(PropTypes\n    .oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]))\n    .isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: '',\n      needLoad: true,\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    movieAPI.getMovie(id).then((movie) => this.setState({\n      movie,\n      needLoad: false,\n    }));\n  }\n\n  render() {\n    const { movie, needLoad } = this.state;\n\n    const {\n      title, storyline, imagePath, genre, rating, subtitle, id,\n    } = movie;\n\n    if (needLoad) return <Loading />;\n\n    return (\n      <div data-testid=\"movie-details\">\n        <img alt=\"Movie Cover\" src={`../${imagePath}`} />\n        <span className=\"card-title\">{`Title: ${title}`}</span>\n        <p>{`Subtitle: ${subtitle}`}</p>\n        <p>{`Storyline: ${storyline}`}</p>\n        <p>{`Genre: ${genre}`}</p>\n        <p>{`Rating: ${rating}`}</p>\n        <Link className=\"\" to={`/movies/${id}/edit`}>EDITAR</Link>\n        <Link className=\"\" to=\"/\">VOLTAR</Link>\n        <Link className=\"\" to=\"/\" onClick={() => movieAPI.deleteMovie(id)}>DELETAR</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  match: PropTypes.objectOf(PropTypes\n    .oneOfType([PropTypes.func, PropTypes.object]))\n    .isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: true,\n      shouldRedirect: false,\n      movie: '',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    movieAPI.getMovie(id).then((movie) => this.setState({\n      movie,\n      status: false,\n    }));\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie).then(() => this.setState({\n      shouldRedirect: true,\n    }));\n  }\n\n  render() {\n    const { history } = this.props;\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      history.push('/');\n    }\n\n    if (status) {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default EditMovie;\n\nEditMovie.propTypes = {\n  history: PropTypes.objectOf(PropTypes\n    .oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]))\n    .isRequired,\n  match: PropTypes.objectOf(PropTypes\n    .oneOfType([PropTypes.func, PropTypes.object]))\n    .isRequired,\n};\n","import React, { Component } from 'react';\n\nclass Error extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Error 404</div>;\n  }\n}\n\nexport default Error;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport NewMovie from './pages/NewMovie';\nimport MovieDetails from './pages/MovieDetails';\nimport EditMovie from './pages/EditMovie';\nimport Error from './pages/error';\n\nfunction App() {\n  return (\n    <Router>\n      <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      <Switch>\n        <Route exact path=\"/movies/new\" component={NewMovie} />\n        <Route exact path=\"/movies/:id\" component={MovieDetails} />\n        <Route exact path=\"/movies/:id/edit\" component={EditMovie} />\n        <Route exact path=\"/\" component={MovieList} />\n        <Route component={Error} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}